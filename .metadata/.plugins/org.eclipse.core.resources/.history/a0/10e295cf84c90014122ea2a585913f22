/*
 * Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.greenrobot.daogenerator.gentest;

import java.util.List;

import de.greenrobot.daogenerator.DaoGenerator;
import de.greenrobot.daogenerator.Entity;
import de.greenrobot.daogenerator.Property;
import de.greenrobot.daogenerator.Schema;
import de.greenrobot.daogenerator.ToMany;

/**
 * Generates entities and DAOs for the example project DaoExample.
 * 
 * Run it as a Java application (not Android).
 * 
 * @author Markus
 */
public class ExampleDaoGenerator {

    public static void main(String[] args) throws Exception {
        Schema schema = new Schema(1000, "com.example.assis_3");

        addNote(schema);
        addChannelItem(schema);
        addSystemConfig(schema);

        new DaoGenerator().generateAll(schema, "../Assis_5/src-gen");
    }

	private static void addNote(Schema schema) {
        Entity note = schema.addEntity("NewsEntity");
        note.addIdProperty().autoincrement();
        note.addIntProperty("newsCategoryId");
        note.addStringProperty("newsCategory");
        note.addIntProperty("mark");
        note.addIntProperty("commentNum");
        note.addIntProperty("newsId");
        note.addIntProperty("publishTime");
        note.addStringProperty("title");
        note.addStringProperty("summary");
        note.addStringProperty("source");
        note.addStringProperty("source_url");
        note.addStringProperty("comment");
        note.addStringProperty("local");
        note.addStringProperty("picListString");
        note.addStringProperty("picOne");
        note.addStringProperty("picTwo");
        note.addStringProperty("picThr");
        note.addBooleanProperty("isLarge");
        note.addBooleanProperty("collectStatus");
        note.setTableName("tbl_news");
    }
    

	// 参数配置名称
	private String configName;

	// 参数配置值
	private String configValue;

	// 系统参数描述
	private String descr;

	// 系统参数所属模块
	private String moduleID;
    
    public static void addChannelItem(Schema schema){
    	Entity item = schema.addEntity("ChannelItem");
    	item.addIdProperty().autoincrement();
    	item.addStringProperty("name");
    	item.addIntProperty("orderId");
    	item.addIntProperty("selected");
    	item.setTableName("tbl_channel");
    }
    
    private static void addSystemConfig(Schema schema) {
    	Entity config = schema.addEntity("SystemConfig");
		config.addStringProperty("configName");
		config.addStringProperty("configValue");
		config.addStringProperty("descr");
		config.addStringProperty("moduleID");
		config.setTableName("tbl_system_config");
	}

    private static void addCustomerOrder(Schema schema) {
        Entity customer = schema.addEntity("Customer");
        customer.addIdProperty();
        customer.addStringProperty("name").notNull();

        Entity order = schema.addEntity("Order");
        order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
        order.addIdProperty();
        Property orderDate = order.addDateProperty("date").getProperty();
        Property customerId = order.addLongProperty("customerId").notNull().getProperty();
        order.addToOne(customer, customerId);

        ToMany customerToOrders = customer.addToMany(order, customerId);
        customerToOrders.setName("orders");
        customerToOrders.orderAsc(orderDate);
    }

}

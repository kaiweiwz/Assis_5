package com.example.assis_3;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.assis_3.SystemConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tbl_system_config.
*/
public class SystemConfigDao extends AbstractDao<SystemConfig, Long> {

    public static final String TABLENAME = "tbl_system_config";

    /**
     * Properties of entity SystemConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConfigName = new Property(1, String.class, "configName", false, "CONFIG_NAME");
        public final static Property ConfigValue = new Property(2, String.class, "configValue", false, "CONFIG_VALUE");
        public final static Property Descr = new Property(3, String.class, "descr", false, "DESCR");
        public final static Property ModuleID = new Property(4, String.class, "moduleID", false, "MODULE_ID");
    };


    public SystemConfigDao(DaoConfig config) {
        super(config);
    }
    
    public SystemConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tbl_system_config' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CONFIG_NAME' TEXT," + // 1: configName
                "'CONFIG_VALUE' TEXT," + // 2: configValue
                "'DESCR' TEXT," + // 3: descr
                "'MODULE_ID' TEXT);"); // 4: moduleID
        //初始化系统参数
        db.execSQL("insert into tbl_system_config(CONFIG_NAME, CONFIG_VALUE) values('isDisplayAbstrct',  '1')"); 
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tbl_system_config'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SystemConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String configName = entity.getConfigName();
        if (configName != null) {
            stmt.bindString(2, configName);
        }
 
        String configValue = entity.getConfigValue();
        if (configValue != null) {
            stmt.bindString(3, configValue);
        }
 
        String descr = entity.getDescr();
        if (descr != null) {
            stmt.bindString(4, descr);
        }
 
        String moduleID = entity.getModuleID();
        if (moduleID != null) {
            stmt.bindString(5, moduleID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SystemConfig readEntity(Cursor cursor, int offset) {
        SystemConfig entity = new SystemConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // configName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // configValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // moduleID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SystemConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConfigName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setConfigValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModuleID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SystemConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SystemConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

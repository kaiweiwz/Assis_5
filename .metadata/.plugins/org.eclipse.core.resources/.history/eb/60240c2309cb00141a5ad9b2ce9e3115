package de.greenrobot.daogenerator;

public class Test {
	public static void main(String[] args) throws Exception {
		Schema schema = new Schema(1000, "com.example.assis_3");

		addNote(schema);
		//addCustomerOrder(schema);
        addItem(schema);
        addNews(schema);
        addConfig(schema);
		new DaoGenerator().generateAll(schema, "D:/android develop/gitHubRes/Assis_5/PagerSlidingTabStrip-master/sample/src-gen");
	}

	private static void addConfig(Schema schema) {
		// TODO Auto-generated method stub
		
	}

	private static void addNote(Schema schema) {
		Entity note = schema.addEntity("FeedbackMsg");
		note.addIdProperty().autoincrement();
		note.addStringProperty("descr");
		note.addStringProperty("date");
		note.addDateProperty("phoneModel");
	}

	private static void addItem(Schema schema){
		Entity note = schema.addEntity("ChannelItem");
		note.addIdProperty().autoincrement();
		note.addStringProperty("name");
		note.addIntProperty("orderId");
		note.addIntProperty("selected");
	}
	
	/** 新闻类别 ID */
	private Integer newsCategoryId;
	/** 新闻类型 */
	private String newsCategory;
	/** 标记状态，如推荐之类的 */
	private Integer mark;;
	/** 评论数量 */
	private Integer commentNum;
	/** ID */
	private Long id;
	/** 新闻ID */
	private Integer newsId;
	/** 标题 */
	private String title;
	/** 新闻源 */
	private String source;
	/** 新闻源地址 URL */
	private String source_url;
	/** 发布时间 */
	private Integer publishTime;
	/** 总结 */
	private String summary;
	/** 评论 */
	private String comment;
	/** 特殊标签，如广告推广之类的 ，可以为空 */
	private String local;
	/** 图片列表字符串 */
	private String picListString;
	/** 图片1 URL */
	private String picOne;
	/** 图片2 URL */
	private String picTwo;
	/** 图片3 URL */
	private String picThr;
	private Boolean isLarge;
	/** 收藏状态  0: 未收藏，  1：收藏 */
	private Boolean collectStatus;

	
	private static void addNews(Schema schema){
		Entity note = schema.addEntity("NewsEntity");
		note.addIdProperty().autoincrement();
		note.addIntProperty("newsCategoryId");
		note.addStringProperty("newsCategory");
		note.addIntProperty("mark");
		note.addIntProperty("commentNum");
		note.addIntProperty("newsId");
		note.addStringProperty("title");
		note.addStringProperty("source");
		note.addStringProperty("source_url");
		note.addIntProperty("publishTime");
		note.addStringProperty("summary");
	}

	private static void addCustomerOrder(Schema schema) {
		Entity customer = schema.addEntity("Customer");
		customer.addIdProperty();
		customer.addStringProperty("name").notNull();

		Entity order = schema.addEntity("Order");
		order.setTableName("ORDERS"); // "ORDER" is a reserved keyword
		order.addIdProperty();
		Property orderDate = order.addDateProperty("date").getProperty();
		Property customerId = order.addLongProperty("customerId").notNull()
				.getProperty();
		order.addToOne(customer, customerId);

		ToMany customerToOrders = customer.addToMany(order, customerId);
		customerToOrders.setName("orders");
		customerToOrders.orderAsc(orderDate);
	}
}

package com.example.assis_3;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.assis_3.NewsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEWS_ENTITY.
*/
public class NewsEntityDao extends AbstractDao<NewsEntity, Long> {

    public static final String TABLENAME = "NEWS_ENTITY";

    /**
     * Properties of entity NewsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewsCategoryId = new Property(1, Integer.class, "newsCategoryId", false, "NEWS_CATEGORY_ID");
        public final static Property NewsCategory = new Property(2, String.class, "newsCategory", false, "NEWS_CATEGORY");
        public final static Property Mark = new Property(3, Integer.class, "mark", false, "MARK");
        public final static Property CommentNum = new Property(4, Integer.class, "commentNum", false, "COMMENT_NUM");
        public final static Property NewsId = new Property(5, Integer.class, "newsId", false, "NEWS_ID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Source_url = new Property(8, String.class, "source_url", false, "SOURCE_URL");
        public final static Property PublishTime = new Property(9, Integer.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Summary = new Property(10, String.class, "summary", false, "SUMMARY");
        public final static Property Comment = new Property(11, String.class, "comment", false, "COMMENT");
        public final static Property Local = new Property(12, String.class, "local", false, "LOCAL");
        public final static Property PicListString = new Property(13, String.class, "picListString", false, "PIC_LIST_STRING");
        public final static Property PicOne = new Property(14, String.class, "picOne", false, "PIC_ONE");
        public final static Property PicTwo = new Property(15, String.class, "picTwo", false, "PIC_TWO");
        public final static Property PicThr = new Property(16, String.class, "picThr", false, "PIC_THR");
        public final static Property IsLarge = new Property(17, Boolean.class, "isLarge", false, "IS_LARGE");
        public final static Property CollectStatus = new Property(18, Boolean.class, "collectStatus", false, "COLLECT_STATUS");
    };


    public NewsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NewsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEWS_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NEWS_CATEGORY_ID' INTEGER," + // 1: newsCategoryId
                "'NEWS_CATEGORY' TEXT," + // 2: newsCategory
                "'MARK' INTEGER," + // 3: mark
                "'COMMENT_NUM' INTEGER," + // 4: commentNum
                "'NEWS_ID' INTEGER," + // 5: newsId
                "'TITLE' TEXT," + // 6: title
                "'SOURCE' TEXT," + // 7: source
                "'SOURCE_URL' TEXT," + // 8: source_url
                "'PUBLISH_TIME' INTEGER," + // 9: publishTime
                "'SUMMARY' TEXT," + // 10: summary
                "'COMMENT' TEXT," + // 11: comment
                "'LOCAL' TEXT," + // 12: local
                "'PIC_LIST_STRING' TEXT," + // 13: picListString
                "'PIC_ONE' TEXT," + // 14: picOne
                "'PIC_TWO' TEXT," + // 15: picTwo
                "'PIC_THR' TEXT," + // 16: picThr
                "'IS_LARGE' INTEGER," + // 17: isLarge
                "'COLLECT_STATUS' INTEGER);"); // 18: collectStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWS_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer newsCategoryId = entity.getNewsCategoryId();
        if (newsCategoryId != null) {
            stmt.bindLong(2, newsCategoryId);
        }
 
        String newsCategory = entity.getNewsCategory();
        if (newsCategory != null) {
            stmt.bindString(3, newsCategory);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(4, mark);
        }
 
        Integer commentNum = entity.getCommentNum();
        if (commentNum != null) {
            stmt.bindLong(5, commentNum);
        }
 
        Integer newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindLong(6, newsId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String source_url = entity.getSource_url();
        if (source_url != null) {
            stmt.bindString(9, source_url);
        }
 
        Integer publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(10, publishTime);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(11, summary);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(12, comment);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(13, local);
        }
 
        String picListString = entity.getPicListString();
        if (picListString != null) {
            stmt.bindString(14, picListString);
        }
 
        String picOne = entity.getPicOne();
        if (picOne != null) {
            stmt.bindString(15, picOne);
        }
 
        String picTwo = entity.getPicTwo();
        if (picTwo != null) {
            stmt.bindString(16, picTwo);
        }
 
        String picThr = entity.getPicThr();
        if (picThr != null) {
            stmt.bindString(17, picThr);
        }
 
        Boolean isLarge = entity.getIsLarge();
        if (isLarge != null) {
            stmt.bindLong(18, isLarge ? 1l: 0l);
        }
 
        Boolean collectStatus = entity.getCollectStatus();
        if (collectStatus != null) {
            stmt.bindLong(19, collectStatus ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsEntity readEntity(Cursor cursor, int offset) {
        NewsEntity entity = new NewsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // newsCategoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newsCategory
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // mark
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // commentNum
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // newsId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // source_url
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // publishTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // summary
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // comment
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // local
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // picListString
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // picOne
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // picTwo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // picThr
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isLarge
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0 // collectStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsCategoryId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNewsCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMark(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCommentNum(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNewsId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSource_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPublishTime(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSummary(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLocal(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPicListString(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPicOne(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPicTwo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPicThr(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsLarge(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setCollectStatus(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
